use adder;

mod common;

#[test]
fn it_adds_two() {
    common::setup();
    assert_eq!(4, adder::add(2, 2));
}

#### 二进制包的集成测试

如果我们的项目是一个只有src/main.rs 文件而没有src/lib.rs 文件的二进制包，
那么我们就无法在tests 目录中创建集成测试，
也无法使用use语句将src/main.rs 中定义的函数导入作用域。
只有代码包（library crate）才可以将函数暴露给其他包来调用，而二进制包只被用于独立执行。

这就是Rust的二进制项目经常会把逻辑编写在src/lib.rs文件中，
而只在src/main.rs 文件中进行简单调用的原因。
这种组织结构使得集成测试可以将我们的项目视作一个代码包，
并能够使用use访问包中的核心功能。只要我们能够保证核心功能一切正常，
src/main.rs 中的少量胶水代码就能够工作，无须进行测试。

## 总结

单元测试可以独立地验证库中的不同部分，并可以测试私有实现细节。
集成测试则可以检查库内的各个部分能否正确地协同工作，它们与外部代码一样，只会访问库中的公共API。